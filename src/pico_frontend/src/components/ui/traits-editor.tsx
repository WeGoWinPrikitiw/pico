import { useState } from "react";
import {
  Button,
  Input,
  Badge,
  Card,
  CardContent,
  CardHeader,
} from "@/components/ui";
import { Plus, X, Sparkles } from "lucide-react";
import type { Trait } from "@/types";

interface TraitsEditorProps {
  traits: Trait[];
  onChange: (traits: Trait[]) => void;
  isAiGenerated?: boolean;
  className?: string;
}

const RARITY_OPTIONS = ["Common", "Rare", "Epic", "Legendary", "Special"];

export function TraitsEditor({
  traits,
  onChange,
  isAiGenerated = false,
  className,
}: TraitsEditorProps) {
  const [newTrait, setNewTrait] = useState<{
    trait_type: string;
    value: string;
    rarity?: string;
  }>({
    trait_type: "",
    value: "",
    rarity: undefined,
  });

  const addTrait = () => {
    if (!newTrait.trait_type.trim() || !newTrait.value.trim()) {
      return;
    }

    const trait: Trait = {
      trait_type: newTrait.trait_type.trim(),
      value: newTrait.value.trim(),
      rarity: newTrait.rarity ? [newTrait.rarity] : [],
    };

    onChange([...traits, trait]);
    setNewTrait({ trait_type: "", value: "", rarity: undefined });
  };

  const removeTrait = (index: number) => {
    const newTraits = traits.filter((_, i) => i !== index);
    onChange(newTraits);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      e.preventDefault();
      addTrait();
    }
  };

  return (
    <Card className={className}>
      <CardHeader className="pb-4">
        <h2 className="text-lg font-semibold flex items-center gap-2">
          <Sparkles className="h-5 w-5" />
          {isAiGenerated ? "AI Generated Traits" : "Traits"}
        </h2>
        <p className="text-sm text-muted-foreground">
          {isAiGenerated
            ? "Traits automatically generated based on AI content"
            : "Add traits to describe the characteristics of your NFT"}
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Display existing traits */}
        {traits.length > 0 && (
          <div className="space-y-3">
            {isAiGenerated && (
              <p className="text-xs text-muted-foreground">
                These traits were generated by AI, but you can edit or remove
                them and add new ones below.
              </p>
            )}
            <div className="flex flex-wrap gap-2">
              {traits.map((trait, index) => {
                const rarity =
                  trait.rarity && trait.rarity.length > 0
                    ? trait.rarity[0]
                    : undefined;
                return (
                  <Badge
                    key={index}
                    variant="secondary"
                    className="flex items-center gap-1 px-2 py-1"
                  >
                    <span className="font-medium">{trait.trait_type}:</span>
                    <span>{trait.value}</span>
                    {rarity && (
                      <span className="text-xs opacity-75">({rarity})</span>
                    )}
                    <button
                      type="button"
                      onClick={() => removeTrait(index)}
                      className="hover:text-destructive ml-1"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                );
              })}
            </div>
          </div>
        )}

        {/* Add new trait form - always show */}
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-2">
            <Input
              placeholder="Trait type (e.g., Color, Style)"
              value={newTrait.trait_type}
              onChange={(e) =>
                setNewTrait((prev) => ({
                  ...prev,
                  trait_type: e.target.value,
                }))
              }
              onKeyDown={handleKeyDown}
              maxLength={50}
            />
            <Input
              placeholder="Value (e.g., Blue, Modern)"
              value={newTrait.value}
              onChange={(e) =>
                setNewTrait((prev) => ({ ...prev, value: e.target.value }))
              }
              onKeyDown={handleKeyDown}
              maxLength={50}
            />
          </div>

          <div className="flex gap-2 items-center">
            <select
              value={newTrait.rarity || ""}
              onChange={(e) =>
                setNewTrait((prev) => ({
                  ...prev,
                  rarity: e.target.value || undefined,
                }))
              }
              className="flex-1 h-9 rounded-md border border-input bg-background px-3 py-1 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
            >
              <option value="">Select rarity (optional)</option>
              {RARITY_OPTIONS.map((rarity) => (
                <option key={rarity} value={rarity}>
                  {rarity}
                </option>
              ))}
            </select>

            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={addTrait}
              disabled={!newTrait.trait_type.trim() || !newTrait.value.trim()}
              className="h-9 px-3"
            >
              <Plus className="h-4 w-4" />
            </Button>
          </div>

          <p className="text-xs text-muted-foreground">
            Add traits to make your NFT more discoverable and valuable.
          </p>
        </div>

        {traits.length === 0 && (
          <p className="text-sm text-muted-foreground text-center py-4">
            {isAiGenerated
              ? "No traits generated yet. Generate an AI image to get suggested traits."
              : "No traits added yet. Add some traits to describe your NFT."}
          </p>
        )}
      </CardContent>
    </Card>
  );
}
