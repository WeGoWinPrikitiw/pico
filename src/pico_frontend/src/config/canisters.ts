/**
 * Canister Configuration
 * This file is auto-generated by npm run generate:canister-ids
 * Do not edit manually - changes will be overwritten
 */

export interface CanisterConfig {
    nft_contract: string;
    operational_contract: string;
    token_contract: string;
    preferences_contract: string;
    forums_contract: string;
    icrc1_ledger_canister: string;
    internet_identity: string;
}

// Default configuration for development
const defaultConfig: CanisterConfig = {
    nft_contract: "v56tl-sp777-77774-qaahq-cai",
    operational_contract: "uxrrr-q7777-77774-qaaaq-cai",
    token_contract: "ucwa4-rx777-77774-qaada-cai",
    preferences_contract: "vu5yx-eh777-77774-qaaga-cai",
    forums_contract: "vpyes-67777-77774-qaaeq-cai",
    icrc1_ledger_canister: "u6s2n-gx777-77774-qaaba-cai",
    internet_identity: "rdmx6-jaaaa-aaaaa-aaadq-cai"
};

// Function to load generated canister IDs
const loadGeneratedConfig = (): Partial<CanisterConfig> => {
    try {
        // This will be generated at build time
        let generatedConfig: any;
        try {
            // Try dynamic import first (ES modules)
            // @ts-ignore - This file is generated at build time
            generatedConfig = require('./generated-canister-ids.json');
        } catch {
            // File doesn't exist, return empty config
            return {};
        }
        return generatedConfig.canister_ids || {};
    } catch (error) {
        // File doesn't exist yet, return empty config
        return {};
    }
};

// Merge configurations with generated taking precedence
export const CANISTER_IDS: CanisterConfig = {
    ...defaultConfig,
    ...loadGeneratedConfig()
};

// Environment-based overrides
export const getCanisterId = (canisterName: keyof CanisterConfig): string => {
    // Check environment variables first
    const envKey = `CANISTER_ID_${canisterName.toUpperCase()}`;
    const envValue = import.meta.env[envKey];

    if (envValue) {
        return envValue;
    }

    return CANISTER_IDS[canisterName];
};

// Network detection
export const isMainnet = import.meta.env.DFX_NETWORK === "ic";
export const isLocal = import.meta.env.DFX_NETWORK !== "ic";

// Host configuration
export const getHost = () => {
    return isMainnet ? "https://ic0.app" : "http://localhost:4943";
};

// Identity provider configuration
export const getIdentityProvider = () => {
    return isMainnet
        ? "https://identity.ic0.app"
        : `http://${getCanisterId('internet_identity')}.localhost:4943`;
}; 