#!/usr/bin/env node

import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function updateBackendConfig() {
  try {
    console.log('Updating backend configuration with current canister IDs...');

    // Get dfx.json canisters
    const dfxJsonPath = join(__dirname, '..', 'dfx.json');
    const dfxJson = JSON.parse(readFileSync(dfxJsonPath, 'utf8'));
    
    const canisterIds = {};
    
    // Extract canister IDs
    for (const [canisterName] of Object.entries(dfxJson.canisters)) {
      try {
        const result = execSync(`dfx canister id ${canisterName} 2>/dev/null || echo ""`, { 
          encoding: 'utf8',
          stdio: ['pipe', 'pipe', 'ignore']
        }).trim();
        
        if (result && result !== '') {
          canisterIds[canisterName] = result;
          console.log(`${canisterName}: ${result}`);
        } else {
          console.log(`${canisterName}: Not deployed`);
        }
      } catch (error) {
        console.log(`${canisterName}: Not accessible`);
      }
    }

    // Determine network
    const network = process.env.DFX_NETWORK || 'local';
    const isLocal = network !== 'ic';

    // Read current config.mo file
    const configPath = join(__dirname, '..', 'src', 'pico_backend', 'config.mo');
    let configContent = readFileSync(configPath, 'utf8');

    // Update canister IDs
    const canisterMappings = {
      'INTERNET_IDENTITY_CANISTER': canisterIds.internet_identity || 'rdmx6-jaaaa-aaaaa-aaadq-cai',
      'NFT_CONTRACT_CANISTER': canisterIds.nft_contract || 'v56tl-sp777-77774-qaahq-cai',
      'OPERATIONAL_CONTRACT_CANISTER': canisterIds.operational_contract || 'uxrrr-q7777-77774-qaaaq-cai',
      'TOKEN_CONTRACT_CANISTER': canisterIds.token_contract || 'ucwa4-rx777-77774-qaada-cai',
      'PREFERENCES_CONTRACT_CANISTER': canisterIds.preferences_contract || 'vu5yx-eh777-77774-qaaga-cai',
      'FORUMS_CONTRACT_CANISTER': canisterIds.forums_contract || 'vpyes-67777-77774-qaaeq-cai',
      'ICRC1_LEDGER_CANISTER': canisterIds.icrc1_ledger_canister || 'u6s2n-gx777-77774-qaaba-cai',
      'PICO_FRONTEND_CANISTER': canisterIds.pico_frontend || 'ulvla-h7777-77774-qaacq-cai'
    };

    // Update IS_LOCAL setting
    configContent = configContent.replace(
      /public let IS_LOCAL = (true|false);/,
      `public let IS_LOCAL = ${isLocal};`
    );

    // Update each canister ID
    Object.entries(canisterMappings).forEach(([varName, canisterId]) => {
      const regex = new RegExp(`public let ${varName} = "[^"]*";`);
      configContent = configContent.replace(
        regex,
        `public let ${varName} = "${canisterId}";`
      );
    });

    // Write updated config
    writeFileSync(configPath, configContent);
    
    console.log(`Updated backend configuration at: ${configPath}`);
    console.log(`Network: ${network} (IS_LOCAL: ${isLocal})`);
    console.log(`Found ${Object.keys(canisterIds).length} deployed canisters`);

    // Also create a Motoko-readable canister map file
    const motokMapPath = join(__dirname, '..', 'src', 'pico_backend', 'canister-map.mo');
    const mapContent = `// Auto-generated canister map
// This file is generated by scripts/update-backend-config.js

module {
${Object.entries(canisterMappings).map(([varName, canisterId]) => 
  `  public let ${varName} = "${canisterId}";`
).join('\n')}

  public let NETWORK = "${network}";
  public let IS_LOCAL = ${isLocal};
  public let GENERATED_AT = "${new Date().toISOString()}";
}`;

    writeFileSync(motokMapPath, mapContent);
    console.log(`Generated canister map at: ${motokMapPath}`);

  } catch (error) {
    console.error('Error updating backend configuration:', error.message);
    process.exit(1);
  }
}

updateBackendConfig(); 